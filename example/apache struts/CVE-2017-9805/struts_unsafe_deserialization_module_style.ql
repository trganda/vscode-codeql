/**
 * @name Deserialization of user-controlled data (Apache Struts)
 * @description Deserializing user-controlled data may allow attackers to
 *              execute arbitrary code.
 * @kind path-problem
 * @problem.severity warning
 * @precision high
 * @id com/github/trganda/struts
 */


import java
import semmle.code.java.dataflow.DataFlow
import semmle.code.java.security.UnsafeDeserializationQuery


class ContentTypeHandler extends Interface {
    ContentTypeHandler() {
        this.hasQualifiedName("org.apache.struts2.rest.handler", "ContentTypeHandler")
    }
}

class ToObjectDeserializer extends Method {
    ToObjectDeserializer() {
        this.getDeclaringType().getASupertype*() instanceof ContentTypeHandler and
        this.getName() = "toObject" and
        this.getParameterType(1).getName() = "Reader"
    }
}

class ContentTypeHandlerInput extends DataFlow::Node {
    ContentTypeHandlerInput() {
        this.asParameter() = any(ToObjectDeserializer des).getParameter(1)
    }
}

module StrutsUnsafeDeserializationConfig implements DataFlow::ConfigSig {
    predicate isSource(DataFlow::Node source) {
        source instanceof ContentTypeHandlerInput
    }

    predicate isSink(DataFlow::Node sink) {
        sink instanceof UnsafeDeserializationSink
    }
}

module MyFlow = DataFlow::Global<StrutsUnsafeDeserializationConfig>;
import MyFlow::PathGraph

from MyFlow::PathNode source, MyFlow::PathNode sink
where MyFlow::flowPath(source, sink)
select sink, source, sink, "Unsafe deserialization of $@", sink, "user input"