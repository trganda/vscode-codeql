/**
 * @name Deserialization of user-controlled data (Apache Struts)
 * @description Deserializing user-controlled data may allow attackers to
 *              execute arbitrary code. 
 * @kind path-problem
 * @problem.severity warning
 * @precision high
 * @id com/github/trganda/struts
 */

// https://securitylab.github.com/research/apache-struts-vulnerability-cve-2017-9805/

import java
import semmle.code.java.dataflow.DataFlow
import semmle.code.java.security.UnsafeDeserializationQuery
import DataFlow::PathGraph

class ContentTypeHandler extends Interface {
    ContentTypeHandler() {
        this.hasQualifiedName("org.apache.struts2.rest.handler", "ContentTypeHandler")
    }
}

class ToObjectDeserializer extends Method {
    ToObjectDeserializer() {
        this.getDeclaringType().getASupertype*() instanceof ContentTypeHandler and
        this.getName() = "toObject" and
        this.getParameterType(1).getName() = "Reader"
    }
}

class ContentTypeHandlerInput extends DataFlow::Node {
    ContentTypeHandlerInput() {
        this.asParameter() = any(ToObjectDeserializer des).getParameter(1)
    }
}

class StrutsUnsafeDeserializationConfig extends DataFlow::Configuration {
    StrutsUnsafeDeserializationConfig() {
        this = "StrutsUnsafeDeserializationConfig"
    }

    override predicate isSource(DataFlow::Node source) {
        source instanceof ContentTypeHandlerInput
    }

    override predicate isSink(DataFlow::Node sink) {
        sink instanceof UnsafeDeserializationSink
    }
}

from DataFlow::PathNode source, DataFlow::PathNode sink, StrutsUnsafeDeserializationConfig conf
where conf.hasFlowPath(source, sink)
select sink.getNode(), source, sink, "Unsafe deserialization of $@", source.getNode(), "user input"